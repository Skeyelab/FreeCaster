name: Build FreeCaster

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-linux:
    runs-on: self-hosted
    if: true  # Enabled for Linux builds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            pkg-config \
            libasound2-dev \
            libjack-jackd2-dev \
            libfreetype6-dev \
            libgl1-mesa-dev \
            libcurl4-openssl-dev \
            libx11-dev \
            libxinerama-dev \
            libxext-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxcomposite-dev \
            libgtk-3-dev \
            libavahi-client-dev \
            libavahi-common-dev

      - name: Verify dependencies
        run: |
          echo "Verifying required packages are available:"
          pkg-config --exists alsa && echo "✓ ALSA" || echo "✗ ALSA"
          pkg-config --exists jack && echo "✓ JACK" || echo "✗ JACK"
          pkg-config --exists freetype2 && echo "✓ FreeType2" || echo "✗ FreeType2"
          pkg-config --exists gl && echo "✓ OpenGL" || echo "✗ OpenGL"
          pkg-config --exists libcurl && echo "✓ cURL" || echo "✗ cURL"
          pkg-config --exists avahi-client && echo "✓ Avahi Client" || echo "✗ Avahi Client"
          pkg-config --exists avahi-common && echo "✓ Avahi Common" || echo "✗ Avahi Common"
          cmake --version
          gcc --version

      - name: Build Linux Plugin
        run: |
          echo "Building FreeCaster VST Plugin for Linux..."
          chmod +x build.sh
          ./build.sh

      - name: Create clean distribution
        run: |
          echo "Creating clean distribution for Linux..."
          # Debug: Check what's actually in the directory
          echo "Current directory contents:"
          ls -la
          echo ""
          echo "Looking for FreeCaster_artefacts directory:"
          find . -name "FreeCaster_artefacts" -type d 2>/dev/null || echo "Not found"
          echo ""
          echo "Looking for VST3 files:"
          find . -name "FreeCaster.vst3" -type d 2>/dev/null || echo "Not found"
          echo ""
          echo "Looking for Standalone files:"
          find . -name "FreeCaster" -type f 2>/dev/null || echo "Not found"
          echo ""

          # For Linux, we'll create a simple distribution from the build artifacts
          mkdir -p dist
          if [ -d "build/FreeCaster_artefacts/VST3/FreeCaster.vst3" ]; then
            echo "Found VST3 plugin, copying..."
            cp -R build/FreeCaster_artefacts/VST3/FreeCaster.vst3 dist/
          else
            echo "VST3 plugin not found at expected location"
          fi
          if [ -f "build/FreeCaster_artefacts/Standalone/FreeCaster" ]; then
            echo "Found Standalone plugin, copying..."
            cp build/FreeCaster_artefacts/Standalone/FreeCaster dist/
          else
            echo "Standalone plugin not found at expected location"
          fi

      - name: Verify distribution
        run: |
          echo "Checking distribution artifacts:"
          ls -la dist/
          echo ""
          echo "Distribution size:"
          du -sh dist/*

      - name: Upload Linux build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: dist/

  build-macos:
    runs-on: macOS
    if: true  # Enabled for macOS builds
    env:
      CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
      DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build macOS Plugin
        run: |
          echo "Building FreeCaster plugin..."

          # Detect actual hardware architecture (not process architecture)
          # Use sysctl which returns the real hardware arch even under Rosetta
          if sysctl -n machdep.cpu.brand_string | grep -q "Apple"; then
            ARCH="arm64"
            echo "Detected Apple Silicon - building for arm64"
          else
            ARCH=$(uname -m)
            echo "Detected Intel Mac - building for $ARCH"
          fi

          # Configure with CMake - explicitly set architecture
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=$ARCH

          # Build the project
          cmake --build build --config Release

          if [ $? -ne 0 ]; then
            echo "Build failed"
            exit 1
          fi

          echo "Build completed successfully"

      - name: Code Sign macOS Plugin
        run: |
          echo "🔐 Checking code signing configuration..."

          # Function to sign a bundle with proper entitlements
          sign_bundle() {
              local bundle_path="$1"
              local bundle_name=$(basename "$bundle_path")

              if [ -z "$CODE_SIGN_IDENTITY" ]; then
                  echo "  ⚠️  Skipping code signing for $bundle_name (no signing identity set)"
                  return 0
              fi

              echo "  🔏 Code signing $bundle_name..."

              # Sign with entitlements and hardened runtime
              codesign --force --options runtime --entitlements entitlements.plist \
                  --sign "$CODE_SIGN_IDENTITY" --timestamp "$bundle_path"

              if [ $? -eq 0 ]; then
                  echo "  ✅ Successfully signed $bundle_name"

                  # Verify the signature
                  echo "  🔍 Verifying signature..."
                  codesign --verify --deep --strict "$bundle_path"
                  if [ $? -eq 0 ]; then
                      echo "  ✅ Signature verification passed"
                  else
                      echo "  ⚠️  Signature verification failed"
                  fi
              else
                  echo "  ❌ Failed to sign $bundle_name"
                  return 1
              fi
          }

          # Look for signing identity (can be set via environment variable or detected)
          if [ -z "$CODE_SIGN_IDENTITY" ]; then
              # Try to detect Apple Developer certificates
              AVAILABLE_IDENTITIES=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1)
              if [ ! -z "$AVAILABLE_IDENTITIES" ]; then
                  # Extract the identity from the security output
                  CODE_SIGN_IDENTITY=$(echo "$AVAILABLE_IDENTITIES" | sed -n 's/.*"\(.*\)"/\1/p')
                  echo "  🔍 Auto-detected signing identity: $CODE_SIGN_IDENTITY"
              else
                  echo "  ⚠️  No Developer ID Application certificate found"
                  echo "  ℹ️  Plugins will be built unsigned (may trigger security warnings)"
              fi
          else
              echo "  ✅ Using specified signing identity: $CODE_SIGN_IDENTITY"
          fi

          # Check for entitlements file
          if [ ! -f "entitlements.plist" ]; then
              echo "  ⚠️  entitlements.plist not found - code signing may fail"
          else
              echo "  ✅ Found entitlements.plist"
          fi

          # Sign AU component
          if [ -d "build/FreeCaster_artefacts/Release/AU/FreeCaster.component" ]; then
              echo "  - Signing AU component..."
              sign_bundle "build/FreeCaster_artefacts/Release/AU/FreeCaster.component"
          fi

          # Sign VST3 plugin
          if [ -d "build/FreeCaster_artefacts/Release/VST3/FreeCaster.vst3" ]; then
              echo "  - Signing VST3 plugin..."
              sign_bundle "build/FreeCaster_artefacts/Release/VST3/FreeCaster.vst3"
          fi

          # Sign standalone application
          if [ -d "build/FreeCaster_artefacts/Release/Standalone/FreeCaster.app" ]; then
              echo "  - Signing standalone application..."
              sign_bundle "build/FreeCaster_artefacts/Release/Standalone/FreeCaster.app"
          fi

      - name: Notarize macOS Plugin
        if: env.CODE_SIGN_IDENTITY != '' && env.APPLE_ID != '' && env.NOTARIZATION_PASSWORD != ''
        run: |
          echo "🍎 Starting notarization process..."

          # Function to notarize a bundle
          notarize_bundle() {
              local bundle_path="$1"
              local bundle_name=$(basename "$bundle_path")
              local original_dir=$(pwd)

              echo "  📦 Creating zip for notarization: $bundle_name"

              # Create a temporary directory for the zip
              local temp_dir=$(mktemp -d)
              local zip_path="$temp_dir/${bundle_name}.zip"

              # Create zip file
              cd "$(dirname "$bundle_path")"
              zip -r "$zip_path" "$(basename "$bundle_path")"

              echo "  🚀 Submitting $bundle_name for notarization..."

                            # Submit for notarization
              echo "  📤 Submitting to Apple's notary service..."
              local notary_output=$(xcrun notarytool submit "$zip_path" \
                  --apple-id "$APPLE_ID" \
                  --password "$NOTARIZATION_PASSWORD" \
                  --team-id "$DEVELOPMENT_TEAM" \
                  --wait 2>&1)
              local notary_exit_code=$?

              echo "  📋 Notary output:"
              echo "$notary_output"

                  if [ $notary_exit_code -eq 0 ]; then
                  # Check if notarization was successful by looking for "status: Accepted"
                  local notarization_success=$(echo "$notary_output" | grep -c "status: Accepted" || echo "0")
                  # Extract submission ID more robustly - look for the final submission ID
                  local submission_id=$(echo "$notary_output" | grep "id:" | tail -1 | sed 's/.*id: \([^[:space:]]*\).*/\1/')
                  echo "  🔍 Extracted submission ID: '$submission_id'"
                  echo "  🔍 Notarization success check: $notarization_success"
                  if [ "$notarization_success" -gt 0 ] && [ ! -z "$submission_id" ]; then
                      echo "  ✅ Notarization completed for $bundle_name (ID: $submission_id)"

          # Staple the notarization ticket
          echo "  📎 Stapling notarization ticket to $bundle_name..."
          # Return to original directory for stapling
          cd "$original_dir"
          xcrun stapler staple "$bundle_path"

                      if [ $? -eq 0 ]; then
                          echo "  ✅ Successfully stapled notarization to $bundle_name"

                          # Verify notarization
                          echo "  🔍 Verifying notarization..."
                          xcrun stapler validate "$bundle_path"
                          if [ $? -eq 0 ]; then
                              echo "  ✅ Notarization verification passed for $bundle_name"
                          else
                              echo "  ⚠️  Notarization verification failed for $bundle_name"
                          fi
                      else
                          echo "  ❌ Failed to staple notarization to $bundle_name"
                      fi

                  else
                      echo "  ❌ Notarization failed for $bundle_name"
                      return 1
                  fi
              else
                  echo "  ❌ Notarization failed for $bundle_name"
                  return 1
              fi

              # Clean up
              rm -rf "$temp_dir"
          }

          # Check if we have the required environment variables
          if [ -z "$APPLE_ID" ] || [ -z "$NOTARIZATION_PASSWORD" ] || [ -z "$DEVELOPMENT_TEAM" ]; then
              echo "  ⚠️  Skipping notarization - missing required environment variables"
              echo "  ℹ️  Set APPLE_ID, NOTARIZATION_PASSWORD, and DEVELOPMENT_TEAM to enable notarization"
              return 0
          fi

          echo "  ✅ Notarization credentials available"

          # Notarize AU component
          if [ -d "build/FreeCaster_artefacts/Release/AU/FreeCaster.component" ]; then
              echo "  - Notarizing AU component..."
              notarize_bundle "build/FreeCaster_artefacts/Release/AU/FreeCaster.component"
          fi

          # Notarize VST3 plugin
          if [ -d "build/FreeCaster_artefacts/Release/VST3/FreeCaster.vst3" ]; then
              echo "  - Notarizing VST3 plugin..."
              notarize_bundle "build/FreeCaster_artefacts/Release/VST3/FreeCaster.vst3"
          fi

          # Notarize standalone application
          if [ -d "build/FreeCaster_artefacts/Release/Standalone/FreeCaster.app" ]; then
              echo "  - Notarizing standalone application..."
              notarize_bundle "build/FreeCaster_artefacts/Release/Standalone/FreeCaster.app"
          fi

      - name: Create clean distribution
        run: |
          echo "Creating clean distribution for macOS..."
          mkdir -p dist
          if [ -d "build/FreeCaster_artefacts/Release/AU/FreeCaster.component" ]; then
            cp -R build/FreeCaster_artefacts/Release/AU/FreeCaster.component dist/
          fi
          if [ -d "build/FreeCaster_artefacts/Release/VST3/FreeCaster.vst3" ]; then
            cp -R build/FreeCaster_artefacts/Release/VST3/FreeCaster.vst3 dist/
          fi
          if [ -d "build/FreeCaster_artefacts/Release/Standalone/FreeCaster.app" ]; then
            cp -R build/FreeCaster_artefacts/Release/Standalone/FreeCaster.app dist/
          fi

      - name: Verify distribution
        run: |
          echo "Checking distribution artifacts:"
          ls -la dist/
          echo ""
          echo "Distribution size:"
          du -sh dist/*

      - name: Cleanup macOS build artifacts
        if: always()
        run: |
          # Clean up temporary files
          find . -name "*.tmp" -o -name "*.temp" -o -name "*~" -type f -delete 2>/dev/null || true
          find . -name ".DS_Store" -type f -delete 2>/dev/null || true
          find . -name "*.build" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "DerivedData" -type d -exec rm -rf {} + 2>/dev/null || true

      - name: Upload macOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: dist/

  build-windows:
    runs-on: Windows
    if: false  # Disabled for now - Windows runner not available
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Windows Plugin
        shell: cmd
        run: |
          echo Building FreeCaster plugin...

          REM Configure with CMake
          cmake -B build -DCMAKE_BUILD_TYPE=Release

          REM Build the project
          cmake --build build --config Release

          if %ERRORLEVEL% neq 0 (
            echo Build failed
            exit /b 1
          )

          echo Build completed successfully

      - name: Create clean distribution
        shell: cmd
        run: |
          echo Creating clean distribution for Windows...

          REM Check if we have the build files
          if not exist "build\FreeCaster_artefacts\VST3\FreeCaster.vst3" (
              echo ERROR: VST3 plugin not found at build\FreeCaster_artefacts\VST3\FreeCaster.vst3
              exit /b 1
          )

          echo 📦 Creating clean distribution from existing build...

          REM Create distribution directory
          if exist "dist" rd /s /q "dist" >nul 2>&1
          mkdir "dist"

          REM Copy VST3 plugin
          echo   - Copying VST3 plugin...
          xcopy "build\FreeCaster_artefacts\VST3\FreeCaster.vst3" "dist\FreeCaster.vst3\" /E /I /Y >nul

          REM Copy standalone application
          if exist "build\FreeCaster_artefacts\Standalone\FreeCaster.exe" (
              echo   - Copying standalone application...
              copy "build\FreeCaster_artefacts\Standalone\FreeCaster.exe" "dist\FreeCaster.exe" >nul
          )

          echo 📊 Distribution created in 'dist' folder:
          if exist "dist" (
              for /f "tokens=*" %%i in ('dir /s "dist" ^| find "File(s)"') do echo   %%i
              for /f "tokens=*" %%i in ('dir /s "dist" ^| find "Dir(s)"') do echo   %%i
          )

      - name: Verify distribution
        shell: cmd
        run: |
          echo Checking distribution artifacts:
          dir dist
          echo.
          echo Distribution size:
          dir dist /s

      - name: Cleanup Windows build artifacts
        if: always()
        shell: powershell
        run: |
          # Clean up temporary files
          Get-ChildItem -Path . -Recurse -Include @("*.tmp", "*.temp", "*~", "Thumbs.db", "ehthumbs.db") -Force | Remove-Item -Force -ErrorAction SilentlyContinue

          # Clean up Visual Studio temporary files
          Get-ChildItem -Path . -Recurse -Name "*.build" -Directory | ForEach-Object { Remove-Item -Path $_ -Recurse -Force -ErrorAction SilentlyContinue }
          Get-ChildItem -Path . -Recurse -Name ".vs" -Directory | ForEach-Object { Remove-Item -Path $_ -Recurse -Force -ErrorAction SilentlyContinue }

      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: dist/
