name: Create Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.2.3, etc.

jobs:
  build-and-release:
    runs-on: macos-latest
    env:
      CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
      DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: |
            build
            ~/Library/Caches/ccache
          key: macos-cmake-${{ runner.arch }}-${{ hashFiles('CMakeLists.txt', 'Source/**') }}
          restore-keys: |
            macos-cmake-${{ runner.arch }}-
            macos-cmake-

      - name: Build macOS Plugin
        run: |
          echo "🔨 Building FreeCaster for macOS release..."
          chmod +x build.sh
          ./build.sh Release

      - name: Code Sign macOS Plugin
        env:
          CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        run: |
          echo "🔐 Code signing plugins..."

          sign_bundle() {
              local bundle_path="$1"
              local bundle_name=$(basename "$bundle_path")

              if [ -z "$CODE_SIGN_IDENTITY" ]; then
                  echo "  ⚠️  Skipping code signing for $bundle_name"
                  return 0
              fi

              echo "  🔏 Code signing $bundle_name..."
              codesign --force --options runtime --entitlements entitlements.plist \
                  --sign "$CODE_SIGN_IDENTITY" --timestamp "$bundle_path"

              if [ $? -eq 0 ]; then
                  echo "  ✅ Successfully signed $bundle_name"
                  codesign --verify --deep --strict "$bundle_path"
              fi
          }

          if [ -d "build/FreeCaster_artefacts/Release/AU/FreeCaster.component" ]; then
              sign_bundle "build/FreeCaster_artefacts/Release/AU/FreeCaster.component"
          fi

          if [ -d "build/FreeCaster_artefacts/Release/VST3/FreeCaster.vst3" ]; then
              sign_bundle "build/FreeCaster_artefacts/Release/VST3/FreeCaster.vst3"
          fi

          if [ -d "build/FreeCaster_artefacts/Release/Standalone/FreeCaster.app" ]; then
              sign_bundle "build/FreeCaster_artefacts/Release/Standalone/FreeCaster.app"
          fi

      - name: Notarize macOS Plugin
        if: env.APPLE_ID != '' && env.NOTARIZATION_PASSWORD != '' && env.DEVELOPMENT_TEAM != ''
        run: |
          echo "🍎 Notarizing plugins..."

          notarize_bundle() {
              local bundle_path="$1"
              local bundle_name=$(basename "$bundle_path")

              echo "  📦 Notarizing $bundle_name..."
              local temp_dir=$(mktemp -d)
              local zip_path="$temp_dir/${bundle_name}.zip"

              cd "$(dirname "$bundle_path")"
              zip -r "$zip_path" "$(basename "$bundle_path")"

              local notary_output=$(xcrun notarytool submit "$zip_path" \
                  --apple-id "$APPLE_ID" \
                  --password "$NOTARIZATION_PASSWORD" \
                  --team-id "$DEVELOPMENT_TEAM" \
                  --wait 2>&1)
              local notary_exit_code=$?

              if [ $notary_exit_code -eq 0 ]; then
                  local notarization_success=$(echo "$notary_output" | grep -c "status: Accepted" || echo "0")
                  if [ "$notarization_success" -gt 0 ]; then
                      echo "  ✅ Notarization successful"
                      cd "$(pwd)"
                      xcrun stapler staple "$bundle_path"
                  else
                      echo "  ❌ Notarization failed"
                      return 1
                  fi
              fi

              rm -rf "$temp_dir"
          }

          if [ -d "build/FreeCaster_artefacts/Release/AU/FreeCaster.component" ]; then
              notarize_bundle "build/FreeCaster_artefacts/Release/AU/FreeCaster.component"
          fi

          if [ -d "build/FreeCaster_artefacts/Release/VST3/FreeCaster.vst3" ]; then
              notarize_bundle "build/FreeCaster_artefacts/Release/VST3/FreeCaster.vst3"
          fi

          if [ -d "build/FreeCaster_artefacts/Release/Standalone/FreeCaster.app" ]; then
              notarize_bundle "build/FreeCaster_artefacts/Release/Standalone/FreeCaster.app"
          fi

      - name: Create distribution
        run: |
          echo "📦 Creating distribution..."
          mkdir -p dist
          if [ -d "build/FreeCaster_artefacts/Release/AU/FreeCaster.component" ]; then
            cp -R build/FreeCaster_artefacts/Release/AU/FreeCaster.component dist/
          fi
          if [ -d "build/FreeCaster_artefacts/Release/VST3/FreeCaster.vst3" ]; then
            cp -R build/FreeCaster_artefacts/Release/VST3/FreeCaster.vst3 dist/
          fi
          if [ -d "build/FreeCaster_artefacts/Release/Standalone/FreeCaster.app" ]; then
            cp -R build/FreeCaster_artefacts/Release/Standalone/FreeCaster.app dist/
          fi

      - name: Create release packages
        run: |
          mkdir -p release-packages
          echo "📦 Packaging for release..."

          # Copy documentation
          cp README.md release-packages/ || echo "README not found"
          cp USER_GUIDE.md release-packages/ || echo "USER_GUIDE not found"

          # Package AU
          if [ -d "dist/FreeCaster.component" ]; then
            cd dist
            zip -r ../release-packages/FreeCaster-AU.zip FreeCaster.component
            cd ..
          fi

          # Package VST3
          if [ -d "dist/FreeCaster.vst3" ]; then
            cd dist
            zip -r ../release-packages/FreeCaster-VST3.zip FreeCaster.vst3
            cd ..
          fi

          # Package Standalone
          if [ -d "dist/FreeCaster.app" ]; then
            cd dist
            zip -r ../release-packages/FreeCaster-Standalone.zip FreeCaster.app
            cd ..
          fi

          echo "✅ Release packages created:"
          ls -lh release-packages/

      - name: Cleanup build artifacts
        if: always()
        run: |
          find . -name "*.tmp" -o -name ".DS_Store" -type f -delete 2>/dev/null || true
          find . -name "*.build" -type d -exec rm -rf {} + 2>/dev/null || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: dist/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: FreeCaster ${{ github.ref_name }}
          body: |
            ## FreeCaster ${{ github.ref_name }}

            A VST3/AU audio plugin for macOS that streams your DAW's audio to AirPlay devices with high-quality, low-latency streaming.

            ### Downloads
            - **AU Plugin** - Audio Units plugin for macOS
            - **VST3 Plugin** - VST3 plugin for macOS
            - **Standalone** - Standalone application

            ### Installation
            1. **AU Plugin**: Copy FreeCaster.component to `~/Library/Audio/Plug-Ins/Components/`
            2. **VST3 Plugin**: Copy FreeCaster.vst3 to `~/Library/Audio/Plug-Ins/VST3/`
            3. **Standalone**: Run FreeCaster.app directly

            ### Requirements
            - macOS 10.13 or later
            - Intel or Apple Silicon processor

            ### Features
            - Real-time AirPlay streaming
            - Automatic device discovery
            - Low-latency audio transmission
            - Support for multiple AirPlay devices
            - Native macOS integration using AVFoundation

            ### Changelog
            See [commit history](https://github.com/${{ github.repository }}/commits/${{ github.ref }}) for detailed changes.
          draft: false
          prerelease: false

      - name: Upload AU Plugin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/FreeCaster-AU.zip
          asset_name: FreeCaster-${{ github.ref_name }}-AU.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload VST3 Plugin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/FreeCaster-VST3.zip
          asset_name: FreeCaster-${{ github.ref_name }}-VST3.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload Standalone App
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/FreeCaster-Standalone.zip
          asset_name: FreeCaster-${{ github.ref_name }}-Standalone.zip
          asset_content_type: application/zip
        continue-on-error: true
